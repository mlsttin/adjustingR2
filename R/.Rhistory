expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
hist(expdata_log$Score)
min(expdata_log$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
min(expdata_log$Score)
mdlfull  <- lmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata)
anova(mdlfull)
mdlnointer <-  lmer(Score ~ Experiment + Time + (1|Participant),data= expdata)
anova(mdlnointer,mdlfull, test = "LRT")
mdlglm  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = gamma, link = log())
mdlglm  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = gamma(link = log))
?glmer
mdlglm  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = gamma(link = "log"))
mdlglm  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
min(expdata$Score)
expdata <- expdata[expdata$Score > 0,]
min(expdata$Score())
min(expdata$Score)
mdlglm  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
mdlglm
anova(mdlglm)
mdlglm_red  <- glmer(Score ~ Experiment + Time  + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
anova(mdlglm_red,mdlglm_full, test = "LRT")\
mdlglm_full  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
mdlglm_red  <- glmer(Score ~ Experiment + Time  + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
plot(mdlglm_full)
plot(mdlglm_red)
plot(mdlglm_full)
plot(mdl_full)
plot(mdlfull)
plot(mdlnointer)
plot(mdlglm_full)
mdlflm_full
mdlglm_full
fitted(mdlglm_full)
plot(fitted(mdlglm_full))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
require(lmerTest)
require(lme4)
require(readxl)
require(glme)
require(ggplot2)
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata <- expdata[expdata$Score > 0,]
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
mdlfull  <- lmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata)
mdlnointer <-  lmer(Score ~ Experiment + Time + (1|Participant),data= expdata)
anova(mdlnointer,mdlfull, test = "LRT")
mdl1 <- lmer(Score ~ Time  + (1|Participant),data= expdata)
mdlglm_full  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
mdlglm_red  <- glmer(Score ~ Experiment + Time  + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
source("~/.active-rstudio-document")
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata <- expdata[expdata$Score > 0,]
mdlfull  <- lmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata)
mdlnointer <-  lmer(Score ~ Experiment + Time + (1|Participant),data= expdata)
anova(mdlnointer,mdlfull, test = "LRT")
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
mdlglm_full  <- glmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
mdlglm_red  <- glmer(Score ~ Experiment + Time  + (1|Participant),data= expdata,family = Gamma(link = "inverse"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
plot(fitted(mdlglm_full)
)
source("~/.active-rstudio-document")
anova(mdlnointer,mdlfull, test = "LRT")
anova(mdlglm_red,mdlglm_full, test = "LRT")
plot(1:377,expdata_log$Score); points(1:377,fitted(mdlfull))
plot(1:377,expdata_log$Score); points(1:377,fitted(mdlfull)), lines(1:377, fitted(mdlfull))
plot(1:377,expdata_log$Score); points(1:377,fitted(mdlfull)); lines(1:377, fitted(mdlfull))
plot(1:377,expdata_log$Score); points(1:377,fitted(mdlfull),col = 'r')
plot(1:377,expdata_log$Score); points(1:377,fitted(mdlfull),col = 'red')
plot(1:377,expdata$Score); points(1:377,fitted(mdlglm_full),col = 'red')
install.packages(c("BiocManager", "cachem", "data.table", "fastmap", "Formula", "httpuv", "httr", "igraph", "RcppArmadillo", "RSQLite"))
q()
require(lmerTest)
require(lme4)
require(readxl)
require(glme)
require(ggplot2)
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata <- expdata[expdata$Score > 0,]
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
mdlfull  <- lmer(Score ~ Experiment + Time + Experiment:Time + (1|Participant),data= expdata_log)
anova(mdlfull)
summary(mdlfull)
plot(mdlfull)
unique(expdata$Session)
expdata[expdata$Session==13]$Session <- 1
expdata$Session==13
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata <- expdata[expdata$Score > 0,]
expdata$Session[expdata$Session==1,] <- 1
expdata$Session[expdata$Session==13] <- 1
expdata$Session[expdata$Session==14] <- 2
expdata$Session[expdata$Session==15] <- 3
plot(expdata)
expdata$Session
expdata$Time
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
mdlfull  <- lmer(Score ~ Experiment*Time+ Session*Time + Staircase + (1|Participant),data= expdata_log)
summary(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time+ Session*Time + Staircase + (1 + Experiment*Time+ Session*Time + Staircase|Participant),data= expdata_log)
mdlfull
summary(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time+ Session*Time + Staircase + (1 + Experiment*Time|Participant),data= expdata_log)
summary(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time+ (1 + Experiment*Time|Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase + Session*Time +  (1 + Experiment|Participant),data= expdata_log)
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase + Session*Time +  (1 + Experiment*Time||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase + Session*Time +  (1 + Experiment + Time||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 + Experiment + Time||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 + Experiment + Time||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 + Time||Participant),data= expdata_log)
\
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 + Experiment||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 ||Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase +  (1 |Participant),data= expdata_log)
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase + Session*Time (1 |Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time+Staircase + Session*Time + (1 |Participant),data= expdata_log)
summary(mdlfull)
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time*Session + Staircase + (1 |Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time*Session + Staircase + (1 |Participant),data= expdata_log)
anova(mdlfull)
plot(mdlfull)
plot(data$Score)
plot(data_log$Score)
plot(expdata_log$Score)
points(1:377,fitted(mdlfull))
points(1:377,fitted(mdlfull),'r')
points(1:377,fitted(mdlfull),col = 'red')
mdlfull  <- lmer(Score ~ Experiment*Time*Session + Staircase + (1 |Participant),data= expdata_log)
mdlred <-  lmer(Score ~ Experiment*Time +Session*Time + Staircase + (1 |Participant),data= expdata_log)
anova(mdlnointer,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ Experiment*Time*Session + Staircase + (1 |Participant),data= expdata_log)
mdlred <-  lmer(Score ~ Experiment*Time +Session*Time + Staircase + (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log)
mdlred <-  lmer(Score ~  Experiment + Time +Session*Time + Staircase+ (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlglm_full  <- glmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglmfull)
anova(mdlglm_full)
mdlglm_red  <- glmer(Score ~  Experiment + Time +Session*Time + Staircase+ (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
plot(1:377,expdata$Score)
lines(1:377,fitted(mdlglm_full), col = 'red')
lines(1:377,fitted(mdlglm_red), col = 'red')
plot(mdlglm_full)
plot(mdlfull)
source("C:/Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/TestInferecelme.R")
anova(mdlred,mdlfull, test = "LRT")
plot(mldfull)
plot(mdlfull)
plot(mdlglm_full)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 + Experiment|Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 + Experiment*Time|Participant),data= expdata_log,REML = false)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 + Experiment*Time|Participant),data= expdata_log,REML = "false")
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
mdlred <-  lmer(Score ~  Experiment + Time +Session*Time + Staircase+ (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
install.packages("optimx")
rm(list = ls())
source("C:/Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/TestInferecelme.R")
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 + Experiment|Participant),data= expdata_log,REML = "false")
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 + Experiment|Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlfull
summary(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +  Experiment*Time +Session*Time + Staircase  |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
summary(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +  Experiment*Time |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +  Experiment*Time |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='nlminb')))
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +  Experiment + Time |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +   Time |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
summary(mdlfull)
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 +   Experiment |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false",control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
anova(mdlfull)
mdlfull  <- lmer(Score ~ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
anova(mdlfull)
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
anova(mdlfull)
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
plot(mdlglm_full)
expdata$Score
residuals(mdlglm_full)
plot(residuals(mdlglm_full))
hist(residuals(mdlglm_full))
mdlglm_full  <- glmer(Score ~ 1 + Staircase + Experiment*Time + Session*Time+  (1 |Participant),data= expdata,family = Gamma(link = "log"))
plot(residuals(mldglm_full))
plot(residuals(mdlglm_full))
plot(expdata$Score)
points(1:377,fitted(mdlglm_full), col = "red")
histogram(fitted(mdlglm_full)-expdata$Score)
hist(fitted(mdlglm_full)-expdata$Score)
?residuals
clc
plot
plot(fitted(mdlglm_full),mdlglm_full$residuals)
res = residuals(mdlglm_full,type = "response")
plot(res)
res = residuals(mdlglm_full,type = "response")
plot(fitted(mdlglm_full),res)
reslme = residuals(mdlfull,type = "response")
plot(fitted(mdlfull),reslme)
plot(fitted(mdlglm_full),resglme)
resglme = residuals(mdlglm_full,type = "response")
plot(fitted(mdlglm_full),resglme)
graphics.off()
summary(mdlfull)
summary(mdlglm_full)
anova(mdlfull)
anova(mdlglm_full)
mdlglm_full  <- glmer(Score ~ 1 + Staircase + Experiment*Time + Session*Time+  (1 +Experiment*Time|Participant),data= expdata,family = Gamma(link = "log"))
summary(mdlglm_full)
mdlglm_full  <- glmer(Score ~ 1 + Staircase + Experiment*Time + Session*Time+  (1 +Experiment|Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_full  <- glmer(Score ~ 1 + Staircase + Experiment*Time + Session*Time+  (1 |Participant),data= expdata,family = Gamma(link = "log"))
summary(mdlglm)
summary(mdlglm_full)
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
summary(mdlfull)
anova(mdlfull)
ggplot(expdata_log, aes(x=Session, y=score, color=Experiment, linetype=Time)))
ggplot(expdata_log, aes(x=Session, y=score, color=Experiment, linetype=Time))
ggplot(expdata_log, aes(x=Session, y=score, color=Experiment, linetype=Time))
ggplot(expdata_log, aes(x=Session, y=Score, color=Experiment, linetype=Time))
ggplot(expdata_log)
source("C:/Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/TestInferecelme.R")
plot(mdlglm_full)
source("C:/Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/TestInferecelme.R")
graphics.off()
plot(mdlfull)
plot(mdlglm_full)
plot(mdlglm_full,ax = log())
plot(1:377mmdlglm_full,ax = log())
plot(1:377,mdlglm_full,ax = log())
graphics.off()
resglme
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment*Time +Session*Time +  (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment*Time  + Staircase  (1 |Participant),data= expdata_log)
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment*Time  + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment:Time + Session*Time + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time +Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment + Time + Session*Time + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time*Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment*Time + Session*Time + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time*Session + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment*Time + Session*Time + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlfull  <- lmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
mdlred <-  lmer(Score ~ 1 +  Experiment + Time + Session*Time + Staircase +   (1 |Participant),data= expdata_log)
anova(mdlred,mdlfull, test = "LRT")
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_red  <- glmer(Score ~ 1 +  Experiment + Time + Session*Time + Staircase +   (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_red  <- glmer(Score ~ 1 +  Experiment*Time + Session*Time +    (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
mdlglm_red  <- glmer(Score ~ 1 +  Experiment*Time +  Staircase  +  (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_red  <- glmer(Score ~ 1 +  Experiment*Time +  Staircase  +  (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
mdlglm_red  <- glmer(Score ~ 1 +  Experiment*Time  + Session*Time + Staircase  +  (1 |Participant),data= expdata,family = Gamma(link = "log"))
qqplot(expdata$Score,mdlglm_full$fitted())
qqplot(expdata$Score,fitted(mdlglm_full))
qqplot(expdata_log$Score,fitted(mdlfull))
graphics.off()
summary(mdlglm_full)
anova(mdlglm_full)
anova(mdlfull)
library(lmerTest)
library(lme4)
library(readxl)
library(glme)
library(ggplot2)
library(optimx)
expdata <- read_excel("C://Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/dataset_experiment1_h1_red.xlsx")
expdata <- na.omit(expdata)
expdata$Experiment = as.factor(expdata$Experiment)
expdata$Time = as.factor(expdata$Time)
expdata$Participant[expdata$Experiment == "Delay" ] = expdata$Participant[expdata$Experiment == "Delay" ]  + 10
expdata$Participant = as.factor(expdata$Participant)
expdata <- expdata[expdata$Score > 0,]
expdata$Session[expdata$Session==13] <- 1
expdata$Session[expdata$Session==14] <- 2
expdata$Session[expdata$Session==15] <- 3
expdata_log <- expdata
expdata_log$Score <- log(expdata$Score)
expdata_log <- expdata_log[is.finite(expdata_log$Score),]
mdlfull  <- lmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata_log,REML = "false")
#control = lmerControl(pptimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
summary(mdlfull)
anova(mdlfull)
plot(mdlfull)
plot(fitted(mldfull))
plot(fitted(mdlfull))
min(abs(fitted(mdlfull)))
residuals(mdlfull,type = 'Pearson')
residuals(mdlfull,type = 'pearson')
tmp = residuals(mdlfull,type = 'pearson')
plot(tmp)
plot(tmp*fitted(mldfull))
plot(tmp*fitted(mdlfull))
points(1:377,residuals(mdlfull,type = 'f'))
points(1:377,residuals(mdlfull,type = 'working'))
points(1:377,residuals(mdlfull,type = 'working'),)
points(1:377,residuals(mdlfull,type = 'working'),col = 'red')
graph()
graphics.off()
plot(residuals(mdlfull),type = "response")
plot(residuals(mdlfull),type =  'response')
plot(residuals(mdlfull,type =  'response'))
points(1:377,residuals(mdlfull,type = 'pearson')*sqrt(fitted(mdlfull)),col = 'red' )
debugSource("C:/Users/Giancarlo.Valente/Documents/Research/Peter/DiscriminationLearningInterference/Tmp/TestInferecelme.R")
object
summary(object)
graphics.off()
plot(object$mu)
points(object$y,col = 'red')
r
plot(R)
plot(r)
points(1:377,y-mu,col = 'blue')
object$sigma
sigma(object)
residuals(mdlfull,type = 'as')
residuals(mdlfull,type = 'response')/residuals(mdlfull,type= 'pearson')
plot(residuals(mdlfull,type = 'response')/residuals(mdlfull,type= 'pearson'))
plot(residuals(mdlfull,type = 'response')/residuals(mdlfull,type= 'pearson'))
graphics.off()
plot(m
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_full  <- glmer(Score ~ 1+ Experiment*Time + Session*Time + Staircase  + (1 |Participant),data= expdata,family = Gamma(link = "log"))
mdlglm_red  <- glmer(Score ~ 1 +  Experiment + Time + Session*Time + Staircase +   (1 |Participant),data= expdata,family = Gamma(link = "log"))
anova(mdlglm_red,mdlglm_full, test = "LRT")
anova(mdlglm_full)
plot(mdlglm_full)
install.packages(c("Hmisc", "openssl", "renv", "testthat", "tibble"))
install.packages(c("lme4", "rlang", "tibble"))
q()
install.packages(c("learnr", "lme4", "rlang", "tibble", "vctrs"))
install.packages(c("lme4", "rlang"))
q()
install.packages(c("blob", "commonmark", "gtable", "htmlwidgets", "renv", "tibble", "XML"))
install.packages(c("cli", "dplyr", "gtable", "hms", "htmltools", "pillar", "ps", "RCurl", "rmarkdown", "vctrs", "xfun"))
q()
install.packages(c("ggplot2", "interp", "ps", "RSQLite"))
install.packages(c("igraph", "markdown", "RcppArmadillo", "renv"))
install.packages(c("fontawesome", "processx", "ps", "tinytex"))
q()
install.packages(c("cachem", "checkmate", "dplyr", "evaluate", "fastclime", "fs", "Hmisc", "httpuv", "later", "lme4", "rlang", "sass", "testthat", "vctrs", "viridis", "viridisLite", "waldo", "xfun"))
install.packages(c("httr", "waldo"))
install.packages("httpuv")
install.packages(c("deldir", "markdown"))
install.packages(c("igraph", "sys"))
install.packages(c("knitr", "learnr", "RcppArmadillo", "rmarkdown"))
install.packages("installr")
require("installr")
updateR()
quit
q()
q()
install.packages("snowfall")
install.packages("nlme")
q()
update.packages(checkBuilt = TRUE)
q()
install.packages("jsonlite")
q()
q()
install.packages(c("testthat", "vctrs"))
q()
install.packages("vctrs")
install.packages("vctrs")
install.packages("digest")
install.packages("jsonlite")
install.packages(c("cpp11", "lme4", "processx"))
y
install.packages(c("lme4", "Rcpp"))
install.packages(c("readxl", "testthat"))
install.packages("readxl")
install.packages("afex")
library(afex)
q()
install.packages("isntallr")
install.packages("installr")
.libPaths()
q()
update.packages(checkBuilt = TRUE)
update.packages()
install.packages(c("cpp11", "fs", "ggplot2", "Matrix", "nlme", "optimx", "purrr", "quantreg"))
install.packages("gtable")
install.packages(c("labeling", "rematch"))
install.packages("dplyr")
install.packages("minqa")
q()
install.packages("Matrix")
install.packages(c("pkgload", "prettyunits", "withr"))
q*()
q()
install.packages(c("evaluate", "plyr"))
install.packages(c("fansi", "plyr", "testthat"))
q()
install.packages(c("fansi", "plyr"))
install.packages(c("fansi", "plyr"))
install.packages(c("foreign", "KernSmooth", "lattice", "Matrix", "mgcv", "nlme", "spatial", "survival"), lib="C:/Program Files/R/R-4.3.1/library")
q()
install.packages(c("fansi", "plyr"))
install.packages(c("fansi", "plyr"))
install.packages(c("lattice", "rpart"), lib="C:/Program Files/R/R-4.3.1/library")
install.packages(c("ggplot2", "vctrs"))
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("utf8")
install.packages(c("optimx", "utf8"))
q()
install.packages("utf8")
install.packages(c("utf8", "withr"))
q()
install.packages("utf8")
install.packages("lattice", lib="C:/Program Files/R/R-4.3.1/library")
install.packages("lme4")
install.packages("snowfall")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
source("C:/Users/giancarlo.valente/OneDrive - Maastricht University/R2 Project/codes4submission/R/show_use_of_R2_correction_function.R")
q()
